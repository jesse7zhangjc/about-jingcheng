{"version":3,"sources":["utils/pageUtils.tsx","utils/transitionUtil.tsx","messages/index.tsx","messages/i18n/en.js","textContent/content.tsx","apis/github.tsx","components/sideNavigationBar/SideNavigationBar.tsx","components/mainContent/projectsPage/Project.tsx","components/mainContent/projectsPage/ProjectsPage.tsx","components/mainContent/homePage/HomePage.tsx","components/mainContent/resumePage/Experience.tsx","components/mainContent/resumePage/Education.tsx","components/mainContent/resumePage/ResumePage.tsx","components/mainContent/statsPage/AboutThisRepoSection.tsx","components/mainContent/statsPage/StatsPage.tsx","components/mainContent/MainContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Page","useTransitionEffect","timeout","useState","showContent","setShowContent","useEffect","setTimeout","messages","sideNavigationBar","home","about","resume","linkedIn","email","projects","stats","resumePage","experience","education","skills","courses","projectsPage","aboutJingcheng","statsPage","aboutThisRepo","lines","forks","stargazers","subscribers","watchers","updated","created","repoStatsNotAvailable","copyRightFooter","copyRightLine","description","content","welcome","header","subheader","educations","degree","major","school","classOf","experiences","employerName","title","duration","descriptions","name","date","sourceHref","projectHref","desc","imgSrc","stack","contacts","fullName","firstName","lastName","github","angellist","snbm","RepoStatusKey","pageItems","pagePathMap","Home","About","Projects","Resume","Stats","pathPageMap","_","invert","crm","SideBarHeader","Menu","Header","className","SideBarMenuItems","props","history","useHistory","pathname","useLocation","vertical","fluid","text","size","menuItems","map","item","Item","key","active","activeItem","onClick","setActiveItem","push","goToPage","SideBarContactIcon","iconName","href","target","rel","Icon","contactInfo","SideBarContactIcons","Container","info","idx","CopyRightFooter","SideNavigationBar","showSidebar","setShowSidebar","showItems","setShowItems","Sidebar","animation","visible","width","Transition","Divider","horizontal","section","ProjectItem","project","index","projectStackSection","length","Extra","join","projectSourceSection","as","Content","Statistic","value","toString","padStart","Meta","Description","Image","src","sbm","pm","ProjectsContent","Group","divided","Project","ProjectsPage","sideBarReady","isOnHomePage","document","hidden","wm","HomePage","textAlign","Experience","List","bulleted","dsc","Education","rm","resumeSubTitles","ResumeSubTitleLinks","subTitle","smooth","to","toLowerCase","ExperienceSection","id","exp","EducationSection","edu","ResumePage","getRepoStatusUrl","spm","RepoStatsNAWarningMessage","showWarning","Message","warning","AboutThisRepoSection","repoStatus","setRepoStatus","isLoading","setIsLoading","retriesLeft","setRetriesLeft","undefined","a","axios","get","newRepoStatus","data","fetchRepoStatus","useRepoStatus","setShowWarning","getStatusticValue","statusKey","Loader","CREATED_AT","UPDATED_AT","moment","fromNow","toLocaleString","Grid","Row","Column","widths","SIZE","label","FORKS_COUNT","STARGAZERS_COUNT","SUBSCRIBERS_COUNT","WATCHERS_COUNT","Label","Value","StatsSection","StatsPage","MainContent","exact","path","App","setSideBarReady","Pushable","Segment","Pusher","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55f3c6d5.chunk.js","sourcesContent":["import _ from 'lodash';\n\nimport messages from 'messages';\n\nconst { sideNavigationBar: snbm } = messages;\nenum Page {\n  Home = '/',\n  About = '/about',\n  Projects = '/projects',\n  Resume = '/resume',\n  Stats = '/stats',\n}\n\nexport const pageItems = [snbm.home, snbm.resume, snbm.projects, snbm.stats];\n\nexport const pagePathMap = {\n  [snbm.home]: Page.Home,\n  [snbm.about]: Page.About,\n  [snbm.projects]: Page.Projects,\n  [snbm.resume]: Page.Resume,\n  [snbm.stats]: Page.Stats,\n};\n\nexport const pathPageMap = _.invert(pagePathMap);\n","import { useEffect, useState } from 'react';\n\n/** Each animation should take 500ms */\nexport const animationDuration = 500;\n\n/** Hook for animation */\nexport const useTransitionEffect = (timeout?: number) => {\n  const [showContent, setShowContent] = useState(false);\n  useEffect(() => {\n    !showContent &&\n      setTimeout(() => {\n        setShowContent(true);\n      }, timeout || 0);\n    // Disable warnings for missing dependencies in useEffect\n    // More details: https://github.com/facebook/create-react-app/issues/6880#issuecomment-485912528\n    // eslint-disable-next-line\n  }, []);\n  return showContent;\n};\n","import {\n  sideNavigationBar,\n  resumePage,\n  projectsPage,\n  statsPage,\n  copyRightFooter,\n} from 'messages/i18n/en';\nimport { content } from 'textContent/content';\n\nconst messages = {\n  sideNavigationBar,\n  resumePage,\n  projectsPage,\n  statsPage,\n  copyRightFooter,\n  content,\n};\n\nexport default messages;\n","export const sideNavigationBar = {\n  home: 'Home',\n  about: 'About',\n  resume: 'Resume',\n  linkedIn: 'LinkedIn',\n  email: 'Email',\n  projects: 'Projects',\n  stats: 'Stats',\n};\n\nexport const resumePage = {\n  resume: 'RESUME',\n  experience: 'EXPERIENCE',\n  education: 'EDUCATION',\n  skills: 'SKILLS',\n  courses: 'COURSES',\n};\n\nexport const projectsPage = {\n  projects: 'PROJECTS',\n  aboutJingcheng: 'About | Jingcheng',\n};\n\nexport const statsPage = {\n  stats: 'STATS',\n  aboutThisRepo: 'ABOUT THIS REPO',\n  lines: 'Lines',\n  forks: 'Forks',\n  stargazers: 'Stargazers',\n  subscribers: 'Subscribers',\n  watchers: 'Watchers',\n  updated: 'Updated',\n  created: 'Created',\n  repoStatsNotAvailable: 'Repo stats not available',\n};\n\nexport const copyRightFooter = {\n  copyRightLine: '© 2020 Jingcheng Zhang',\n  description: 'Built from scratch with React',\n};\n","// This is more like a config file that allows you to update the content that is showing on the app\n// Might consider changing it to a json config file in the future\n\nimport { IEducation, IExperience, IProject } from 'textContent/contentTypes';\n\nconst welcome = {\n  header: `Hi there, I'm Jingcheng.`,\n  subheader: `I am an NYU graduate and a Software Development Engineer at Amazon Web Services. Before Amazon, I was at Byton, Faraday Future and BYD Coach and Bus building web apps to improve EV manufacturing experience.`,\n};\n\nconst educations: IEducation[] = [\n  {\n    degree: 'M.S.',\n    major: 'Industrial Engineering',\n    school: 'New York University',\n    classOf: 2015,\n  },\n];\n\nconst experiences: IExperience[] = [\n  {\n    employerName: 'Amazon Web Services, Inc.',\n    title: 'Software Development Engineer',\n    duration: 'November 2019 - Present',\n    descriptions: [\n      'Build complex customer-facing user interfaces for a new data wrangling AWS Console with React/Redux',\n      'Integrated back-end APIs including AWS Glue, S3services, etc. to support front-end interactive user interfaces',\n      'Implement data modeling transforms such as Joins, Unions, Pivot/Unpivot, Aggregate, etc. to manipulate data on the UI for preview and send requests to update DynamoDB and schedule Glue jobs',\n      'Lead the design, development, deployment and improvement of integration and unit testing for the console',\n      'Partner with UI/UX Designers to design, fulfill styling changes and better user experience',\n    ],\n  },\n  {\n    employerName: 'Byton North America Corp.',\n    title: 'Full stack Developer',\n    duration: 'January 2019 - July 2019',\n    descriptions: [\n      'Led, designed and built Supply Chain Dashboard web app with React.js/Redux, Chart.js Python Tornado and SQL Supply Chain department to monitor purchase and logistic status',\n      'Developed RESTful APIs and HTTP API wrappers in Python to streamline data communication among Engineering and Business systems, including Intuit Quick Base, Enovia PLM, MS SharePoint, logistic portals',\n      'Performed data analysis and visualization with Python Pandas to evaluate and improve business efficiency',\n    ],\n  },\n  {\n    employerName: 'Faraday Future Inc.',\n    title: 'Full stack Engineer',\n    duration: 'June 2018 - January 2019',\n    descriptions: [\n      'Led, designed and built CVIS (Complete Vehicle Inspection System) at both front and back end to optimize quality issue logging experience and efficiency of quality inspectors with an intuitive and interactive 3D UI',\n      'Built RESTful APIs to provide quality inspection information to other systems and handle incoming XML/JSON requests from MES (Manufacturing Execution System) and inspection hardware',\n      'Incorporated, integrated and refactored 3D Model built with Three.js into React for better user interactions',\n    ],\n  },\n  {\n    employerName: 'BYD Coach and Bus LLC.',\n    title: 'Full stack Developer',\n    duration: 'August 2017 - June 2018',\n    descriptions: [\n      'Led, designed and built Internal Purchase Request System Web Application at both front and back end to process purchase requests submitted to Purchasing; Eliminated 90% manual work and 95% human errors',\n      'Designed and built RESTful APIs to validate material information, submit material requests, suspicious duplicated purchase requests, etc.; Integrated PR system and reporting system UI with back-end RESTful APIs',\n    ],\n  },\n  {\n    employerName: 'Bomoda, a Division of Weber Shandwick',\n    title: 'Full stack Developer',\n    duration: 'July 2016 - July 2017',\n    descriptions: [\n      'Performed regular and ad-hoc data ETL and keyword content analysis on social and E-commerce platforms (3 - 5 GB / day) with Python and SQL; Managed Google BigQuery database of aggregated data output',\n      'DAutomated data visualization with Python; Saved 50% of time (over 100 man-hour) of the monthly report process and eliminate 90 % of human errors',\n    ],\n  },\n];\n\nconst projects: IProject[] = [\n  {\n    name: 'About | Jingcheng',\n    date: 'July, 2020',\n    sourceHref: 'https://github.com/jesse7zhangjc/about-jingcheng',\n    projectHref: 'https://jesse7zhangjc.github.io/about-jingcheng',\n    desc: 'A simple personal website built from scratch with React',\n    imgSrc: 'assets/images/projects/aboutJingchengPreview.png',\n    stack: ['React', 'TypeScript', 'Semantic UI'],\n  },\n];\n\nconst contacts = {\n  fullName: 'Jingcheng Zhang',\n  firstName: 'Jingcheng',\n  lastName: 'Zhang',\n  title: 'Software Engineer',\n  linkedIn: 'https://www.linkedin.com/in/jingcheng-zhang',\n  github: 'https://github.com/jesse7zhangjc',\n  angellist: 'https://angel.co/u/jingcheng-zhang',\n  email: 'jingcheng.zhang@nyu.edu',\n};\n\nexport const content = {\n  welcome,\n  educations,\n  experiences,\n  projects,\n  contacts,\n};\n","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\n/** User name and repo name constants */\nconst USER_NAME = 'jesse7zhangjc';\nconst REPO_NAME = 'about-jingcheng';\nconst getRepoStatusUrl = `https://api.github.com/repos/${USER_NAME}/${REPO_NAME}`;\nconst retryTimes = 3;\n\nexport enum RepoStatusKey {\n  FORKS_COUNT = 'forks_count',\n  WATCHERS_COUNT = 'watchers_count',\n  STARGAZERS_COUNT = 'stargazers_count',\n  SUBSCRIBERS_COUNT = 'subscribers_count',\n  SIZE = 'size',\n  UPDATED_AT = 'updated_at',\n  CREATED_AT = 'created_at',\n}\n\nexport interface IRepoStatus {\n  [RepoStatusKey.FORKS_COUNT]: number;\n  [RepoStatusKey.WATCHERS_COUNT]: number;\n  [RepoStatusKey.STARGAZERS_COUNT]: number;\n  [RepoStatusKey.SUBSCRIBERS_COUNT]: number;\n  [RepoStatusKey.SIZE]: number;\n  [RepoStatusKey.UPDATED_AT]: string;\n  [RepoStatusKey.CREATED_AT]: string;\n}\n\n/** Github repo status hook */\nexport const useRepoStatus = () => {\n  const [repoStatus, setRepoStatus] = useState<IRepoStatus | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean | undefined>();\n  const [retriesLeft, setRetriesLeft] = useState(retryTimes);\n  useEffect(() => {\n    const fetchRepoStatus = async () => {\n      try {\n        setIsLoading(true);\n        const newRepoStatus = await axios.get(getRepoStatusUrl);\n        setRepoStatus(newRepoStatus.data);\n        setIsLoading(false);\n      } catch (err) {\n        setRetriesLeft(retriesLeft - 1);\n        setIsLoading(undefined);\n      }\n    };\n    if (!repoStatus && isLoading === undefined) {\n      retriesLeft > 0 ? fetchRepoStatus() : setIsLoading(false);\n    }\n  }, [repoStatus, isLoading, retriesLeft]);\n\n  return [repoStatus, isLoading];\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Sidebar,\n  Menu,\n  Divider,\n  Transition,\n  Container,\n  Icon,\n  SemanticICONS,\n} from 'semantic-ui-react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { animationDuration } from 'utils/transitionUtil';\nimport { pagePathMap, pageItems, pathPageMap } from 'utils/pageUtils';\nimport messages from 'messages';\n\nimport 'components/sideNavigationBar/sideNavigationBar.css';\n\nconst {\n  copyRightFooter: crm,\n  content: { contacts },\n} = messages;\n\nconst SideBarHeader = () => (\n  <Menu.Header>\n    <div className=\"my-name\">{contacts.fullName}</div>\n    <div className=\"my-title\">{contacts.title}</div>\n    <div className=\"my-email\">{contacts.email}</div>\n  </Menu.Header>\n);\n\ninterface ISideBarMenuItemsProps {\n  menuItems: string[];\n  activeItem?: string;\n  setActiveItem?: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst SideBarMenuItems = (props: ISideBarMenuItemsProps) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const goToPage = (item: string) =>\n    pagePathMap[item] &&\n    pathname !== pagePathMap[item] &&\n    history.push(pagePathMap[item]);\n  const getMenuItem = (item: string) => {\n    const onClick = () => {\n      if (props.setActiveItem && item) {\n        props.setActiveItem(item);\n        goToPage(item);\n      }\n    };\n    return (\n      <Menu.Item\n        content={<span>{item}</span>}\n        key={item}\n        active={item === props.activeItem}\n        onClick={onClick}\n      />\n    );\n  };\n  return (\n    <Menu vertical fluid text size=\"massive\">\n      {props.menuItems.map(getMenuItem)}\n    </Menu>\n  );\n};\n\nSideBarMenuItems.propTypes = {\n  menuItems: PropTypes.arrayOf(PropTypes.string).isRequired,\n  activeItem: PropTypes.string,\n  setActiveItem: PropTypes.func,\n};\n\ninterface ISideBarContactIconProps {\n  iconName: SemanticICONS;\n  href: string;\n}\n\nconst SideBarContactIcon = ({ iconName, href }: ISideBarContactIconProps) => (\n  <a target=\"_blank\" rel=\"noopener noreferrer\" href={href}>\n    <Icon name={iconName} size=\"big\" />\n  </a>\n);\n\nconst contactInfo: ISideBarContactIconProps[] = [\n  {\n    iconName: 'linkedin',\n    href: contacts.linkedIn,\n  },\n  {\n    iconName: 'github',\n    href: contacts.github,\n  },\n  {\n    iconName: 'angellist',\n    href: contacts.angellist,\n  },\n  {\n    iconName: 'mail outline',\n    href: `mailto:${contacts.email}`,\n  },\n];\n\nconst SideBarContactIcons = () => (\n  <Container className=\"contact-icon-container\" fluid>\n    <div>\n      {contactInfo.map((info, idx) => (\n        <SideBarContactIcon key={idx} {...info} />\n      ))}\n    </div>\n  </Container>\n);\n\nconst CopyRightFooter = () => (\n  <div className=\"copy-right-footer\">\n    <p>{crm.copyRightLine}</p>\n    <p>{crm.description}</p>\n  </div>\n);\n\nconst SideNavigationBar = () => {\n  const [activeItem, setActiveItem] = useState(pageItems[0]);\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [showItems, setShowItems] = useState(false);\n  const { pathname } = useLocation();\n  /** Get active item from path */\n  pathPageMap[pathname] &&\n    activeItem !== pathPageMap[pathname] &&\n    setActiveItem(pathPageMap[pathname]);\n  setTimeout(() => setShowSidebar(true));\n  setTimeout(() => setShowItems(true), animationDuration);\n  return (\n    <Sidebar animation=\"push\" visible={showSidebar} width=\"wide\">\n      <Transition\n        visible={showItems}\n        animation=\"fade up\"\n        duration={animationDuration}\n      >\n        <Container fluid>\n          <Divider className=\"top-divider\" horizontal section />\n          <SideBarHeader />\n          <Divider horizontal section />\n          <SideBarMenuItems\n            menuItems={pageItems}\n            activeItem={activeItem}\n            setActiveItem={setActiveItem}\n          />\n          <Divider horizontal section />\n          <SideBarContactIcons />\n        </Container>\n      </Transition>\n      <CopyRightFooter />\n    </Sidebar>\n  );\n};\n\nexport default SideNavigationBar;\n","import React from 'react';\nimport { Item, Statistic, Icon } from 'semantic-ui-react';\n\nimport { getCorrectDevAssetsPath } from 'utils/devEnvAssetsPathUtil';\nimport { IProject } from 'textContent/contentTypes';\n\ninterface IProjectItemProps {\n  project: IProject;\n  index: number;\n}\n\nconst ProjectItem = ({ project, index }: IProjectItemProps) => {\n  const projectStackSection = project.stack && project.stack.length > 0 && (\n    <Item.Extra className=\"project-item-stack\">{`Stack: ${project.stack.join(\n      ', '\n    )}`}</Item.Extra>\n  );\n  const projectSourceSection = project.sourceHref && (\n    <Item.Extra\n      className=\"project-item-stack\"\n      as=\"a\"\n      href={project.sourceHref}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon name=\"github\" />\n      <span>Source code</span>\n    </Item.Extra>\n  );\n  return (\n    <Item className=\"project-item\">\n      <Item.Content className=\"project-item-content\">\n        <Statistic\n          className={'project-item-index'}\n          value={index.toString().padStart(2, '0')}\n          size=\"small\"\n        />\n        <Item.Header className=\"project-item-header\" as=\"div\">\n          {project.name}\n        </Item.Header>\n        <Item.Meta className=\"project-item-date\">{project.date}</Item.Meta>\n        <Item.Description className=\"project-item-desc\">\n          {project.desc}\n        </Item.Description>\n        {projectStackSection}\n        {projectSourceSection}\n      </Item.Content>\n      <Item.Image\n        src={getCorrectDevAssetsPath(project.imgSrc)}\n        size=\"big\"\n        as=\"a\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={project.projectHref}\n      />\n    </Item>\n  );\n};\n\nexport default ProjectItem;\n","import React, { useEffect } from 'react';\nimport {\n  Container,\n  Header,\n  Divider,\n  Transition,\n  Item,\n} from 'semantic-ui-react';\n\nimport messages from 'messages';\nimport { useTransitionEffect, animationDuration } from 'utils/transitionUtil';\nimport { IMainContentProps } from 'components/mainContent/MainContent';\nimport ProjectItem from 'components/mainContent/projectsPage/Project';\n\nimport 'components/mainContent/projectsPage/projectsPage.css';\n\nconst {\n  sideNavigationBar: sbm,\n  projectsPage: pm,\n  content: { projects, contacts },\n} = messages;\n\nconst ProjectsContent = () => {\n  return (\n    <Item.Group divided>\n      {projects.map((project, index) => (\n        <ProjectItem key={index} index={index + 1} project={project} />\n      ))}\n    </Item.Group>\n  );\n};\n\ninterface IProjectsPageProps extends IMainContentProps {\n  /** Use this flag to decide if we want to update the page title to Project */\n  isOnHomePage: boolean;\n}\n\nconst ProjectsPage = (props: IProjectsPageProps) => {\n  const showContent = useTransitionEffect(\n    props.sideBarReady ? 0 : animationDuration\n  );\n  useEffect(() => {\n    if (!props.isOnHomePage) {\n      document.title = `${sbm.projects} | ${contacts.fullName}`;\n    }\n    // Disable warnings for missing dependencies in useEffect\n    // More details: https://github.com/facebook/create-react-app/issues/6880#issuecomment-485912528\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <Transition\n      animation=\"fade right\"\n      duration={animationDuration}\n      visible={showContent}\n    >\n      <Container className=\"projects-page\">\n        <Divider section hidden />\n        <Header className=\"projects-title\" size=\"huge\">\n          {pm.projects}\n        </Header>\n        <Divider hidden />\n        <Divider />\n        <ProjectsContent />\n      </Container>\n    </Transition>\n  );\n};\n\nexport default ProjectsPage;\n","import React, { useEffect } from 'react';\nimport { Container, Divider, Header, Transition } from 'semantic-ui-react';\n\nimport { useTransitionEffect, animationDuration } from 'utils/transitionUtil';\nimport messages from 'messages';\nimport { IMainContentProps } from 'components/mainContent/MainContent';\n\nimport 'components/mainContent/homePage/homePage.css';\nimport ProjectsPage from 'components/mainContent/projectsPage/ProjectsPage';\n\nconst {\n  sideNavigationBar: sbm,\n  content: { welcome: wm, contacts },\n} = messages;\n\ntype IHomePageProps = IMainContentProps;\n\nconst HomePage = (props: IHomePageProps) => {\n  const showContent = useTransitionEffect(\n    props.sideBarReady ? 0 : animationDuration\n  );\n  useEffect(() => {\n    document.title = `${sbm.about} | ${contacts.fullName}`;\n  }, []);\n  return (\n    <Transition\n      animation=\"fade right\"\n      duration={animationDuration}\n      visible={showContent}\n    >\n      <Container className=\"home-page\">\n        <Divider section hidden className=\"top-divider\" />\n        <Container\n          className=\"home-page-content-container\"\n          textAlign=\"justified\"\n        >\n          <Header size=\"large\">{wm.header}</Header>\n          <Header size=\"small\">{wm.subheader}</Header>\n        </Container>\n        <Divider hidden section className=\"top-divider\" />\n        <ProjectsPage isOnHomePage={true} />\n      </Container>\n    </Transition>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Container, Header, List } from 'semantic-ui-react';\n\nimport { IExperience } from 'textContent/contentTypes';\n\ninterface IExperienceProps {\n  experience: IExperience;\n}\n\nconst Experience = ({ experience }: IExperienceProps) => {\n  return (\n    <Container>\n      <div className=\"resume-exp-item-employer-title\">\n        <Header className=\"resume-exp-item-employer\" as=\"span\">\n          {experience.employerName}\n        </Header>\n        <Header className=\"resume-exp-item-dash\" as=\"span\">\n          -\n        </Header>\n        <Header className=\"resume-exp-item-title\" as=\"span\">\n          {experience.title}\n        </Header>\n      </div>\n      <Header className=\"resume-exp-item-duration\" as=\"h5\">\n        {experience.duration}\n      </Header>\n      <List bulleted className=\"resume-exp-item-desc-list\">\n        {experience.descriptions.map((dsc, idx) => (\n          <List.Item key={idx} className=\"resume-exp-item-desc-item\">\n            {dsc}\n          </List.Item>\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\nimport { Container, Header } from 'semantic-ui-react';\n\nimport { IEducation } from 'textContent/contentTypes';\n\ninterface IEducationProps {\n  education: IEducation;\n}\n\nconst Education = ({ education }: IEducationProps) => {\n  return (\n    <Container>\n      <div className=\"resume-edu-degree-major\">\n        <Header\n          className=\"resume-edu-item-degree\"\n          as=\"span\"\n          size=\"small\"\n        >{`${education.degree}`}</Header>\n        <Header className=\"resume-edu-item-in\" as=\"span\" size=\"small\">\n          in\n        </Header>\n        <Header\n          className=\"resume-edu-item-major\"\n          as=\"span\"\n          size=\"small\"\n        >{`${education.major}`}</Header>\n      </div>\n      <div className=\"resume-edu-school-class\">\n        <Header className=\"resume-edu-item-school\" as=\"span\" size=\"small\">\n          {education.school}\n        </Header>\n        <Header className=\"resume-edu-item-comma\" as=\"span\" size=\"small\">\n          ,\n        </Header>\n        <Header className=\"resume-edu-item-class\" as=\"span\" size=\"small\">\n          {education.classOf}\n        </Header>\n      </div>\n    </Container>\n  );\n};\n\nexport default Education;\n","import React, { useEffect } from 'react';\nimport { Container, Header, Divider, Transition } from 'semantic-ui-react';\n\nimport messages from 'messages';\nimport { useTransitionEffect, animationDuration } from 'utils/transitionUtil';\nimport { HashLink } from 'react-router-hash-link';\nimport { IMainContentProps } from 'components/mainContent/MainContent';\nimport Experience from 'components/mainContent/resumePage/Experience';\nimport Education from 'components/mainContent/resumePage/Education';\n\nimport 'components/mainContent/resumePage/resumePage.css';\n\nconst {\n  sideNavigationBar: sbm,\n  resumePage: rm,\n  content: { experiences, educations, contacts },\n} = messages;\nconst resumeSubTitles = [\n  rm.experience,\n  rm.education,\n  // TODO: add in skills section\n  // rm.skills,\n];\n\nconst ResumeSubTitleLinks = () => (\n  <div className=\"subtitles\">\n    {resumeSubTitles.map(subTitle => (\n      <Header\n        className=\"resume-subtitle-link\"\n        size=\"small\"\n        key={subTitle}\n        as=\"span\"\n      >\n        <HashLink smooth to={`/resume#${subTitle.toLowerCase()}-section`}>\n          {subTitle}\n        </HashLink>\n      </Header>\n    ))}\n  </div>\n);\n\nconst ExperienceSection = () => {\n  return (\n    <div id=\"experiment-section\">\n      <Header className=\"resume-subtitle\" size=\"large\">\n        {rm.experience}\n      </Header>\n      {experiences.map((exp, idx) => (\n        <div key={idx}>\n          <Experience experience={exp} />\n          {idx !== experiences.length && <Divider hidden section />}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst EducationSection = () => {\n  return (\n    <div id=\"education-section\">\n      <Header className=\"resume-subtitle\" size=\"large\">\n        {rm.education}\n      </Header>\n      {educations.map((edu, idx) => (\n        <div key={idx}>\n          <Education education={edu} />\n          {idx !== experiences.length && <Divider hidden section />}\n        </div>\n      ))}\n    </div>\n  );\n};\n\ntype IResumePageProps = IMainContentProps;\n\nconst ResumePage = (props: IResumePageProps) => {\n  const showContent = useTransitionEffect(\n    props.sideBarReady ? 0 : animationDuration\n  );\n  useEffect(() => {\n    document.title = `${sbm.resume} | ${contacts.fullName}`;\n  }, []);\n  return (\n    <Transition\n      animation=\"fade right\"\n      duration={animationDuration}\n      visible={showContent}\n    >\n      <Container className=\"resume-page\">\n        <Divider section hidden />\n        <Header className=\"resume-title\" size=\"huge\">\n          {rm.resume}\n        </Header>\n        <Divider hidden />\n        <ResumeSubTitleLinks />\n        <Divider />\n        <Divider hidden section />\n        <ExperienceSection />\n        <Divider hidden section />\n        <EducationSection />\n      </Container>\n    </Transition>\n  );\n};\n\nexport default ResumePage;\n","import React, { useState } from 'react';\nimport {\n  Divider,\n  Header,\n  Statistic,\n  Grid,\n  Loader,\n  Message,\n  Icon,\n} from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport { useRepoStatus, IRepoStatus, RepoStatusKey } from 'apis/github';\nimport messages from 'messages';\n\nconst { statsPage: spm } = messages;\nconst NADash = '-';\n\ninterface IRepoStatsNAWarningMessageProps {\n  showWarning: boolean;\n}\n\nconst RepoStatsNAWarningMessage = ({\n  showWarning,\n}: IRepoStatsNAWarningMessageProps) => {\n  if (!showWarning) {\n    return null;\n  }\n  return (\n    <Message warning>\n      <Message.Header>\n        <Icon name=\"warning\" />\n        {spm.repoStatsNotAvailable}\n      </Message.Header>\n    </Message>\n  );\n};\n\nconst AboutThisRepoSection = () => {\n  const [repoStatus, isLoading] = useRepoStatus() as [\n    IRepoStatus | undefined,\n    boolean | undefined\n  ];\n  const [showWarning, setShowWarning] = useState(false);\n  const getStatusticValue = (\n    statusKey: RepoStatusKey,\n    isLoading?: boolean,\n    repoStatus?: IRepoStatus\n  ) => {\n    if (isLoading) {\n      return <Loader active />;\n    }\n    if (repoStatus) {\n      switch (statusKey) {\n        case RepoStatusKey.CREATED_AT:\n        case RepoStatusKey.UPDATED_AT:\n          return moment(repoStatus[statusKey]).fromNow();\n        default:\n          return repoStatus[statusKey].toLocaleString();\n      }\n    }\n\n    !showWarning && isLoading === false && !repoStatus && setShowWarning(true);\n    return NADash;\n  };\n  return (\n    <div>\n      <Divider hidden section />\n      <Header size=\"large\" className=\"about-this-repo-title\">\n        {spm.aboutThisRepo}\n        <a\n          href=\"https://github.com/jesse7zhangjc/about-jingcheng\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Icon name=\"github\" className=\"about-this-repo-icon\" />\n        </a>\n      </Header>\n      <RepoStatsNAWarningMessage showWarning={showWarning} />\n      <Divider hidden />\n      <Grid divided=\"vertically\">\n        <Grid.Row>\n          <Grid.Column width={16}>\n            <Statistic.Group size=\"tiny\" widths={5}>\n              <Statistic\n                value={getStatusticValue(\n                  RepoStatusKey.SIZE,\n                  isLoading,\n                  repoStatus\n                )}\n                label={spm.lines}\n              />\n              <Statistic\n                value={getStatusticValue(\n                  RepoStatusKey.FORKS_COUNT,\n                  isLoading,\n                  repoStatus\n                )}\n                label={spm.forks}\n              />\n              <Statistic\n                value={getStatusticValue(\n                  RepoStatusKey.STARGAZERS_COUNT,\n                  isLoading,\n                  repoStatus\n                )}\n                label={spm.stargazers}\n              />\n              <Statistic\n                value={getStatusticValue(\n                  RepoStatusKey.SUBSCRIBERS_COUNT,\n                  isLoading,\n                  repoStatus\n                )}\n                label={spm.subscribers}\n              />\n              <Statistic\n                value={getStatusticValue(\n                  RepoStatusKey.WATCHERS_COUNT,\n                  isLoading,\n                  repoStatus\n                )}\n                label={spm.watchers}\n              />\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width={16}>\n            <Statistic.Group size=\"tiny\" widths={2}>\n              <Statistic>\n                <Statistic.Label>{spm.updated}</Statistic.Label>\n                <Statistic.Value>\n                  {getStatusticValue(\n                    RepoStatusKey.UPDATED_AT,\n                    isLoading,\n                    repoStatus\n                  )}\n                </Statistic.Value>\n              </Statistic>\n              <Statistic>\n                <Statistic.Label>{spm.created}</Statistic.Label>\n                <Statistic.Value>\n                  {getStatusticValue(\n                    RepoStatusKey.CREATED_AT,\n                    isLoading,\n                    repoStatus\n                  )}\n                </Statistic.Value>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nexport default AboutThisRepoSection;\n","import React, { useEffect } from 'react';\nimport { Container, Header, Divider, Transition } from 'semantic-ui-react';\n\nimport messages from 'messages';\nimport { useTransitionEffect, animationDuration } from 'utils/transitionUtil';\nimport { IMainContentProps } from 'components/mainContent/MainContent';\n\nimport 'components/mainContent/statsPage/statsPage.css';\nimport AboutThisRepoSection from 'components/mainContent/statsPage/AboutThisRepoSection';\n\nconst {\n  sideNavigationBar: sbm,\n  statsPage: spm,\n  content: { contacts },\n} = messages;\n\nconst StatsSection = () => {\n  return <AboutThisRepoSection />;\n};\n\ntype IStatsPageProps = IMainContentProps;\n\nconst StatsPage = (props: IStatsPageProps) => {\n  const showContent = useTransitionEffect(\n    props.sideBarReady ? 0 : animationDuration\n  );\n  useEffect(() => {\n    document.title = `${sbm.stats} | ${contacts.fullName}`;\n  }, []);\n  return (\n    <Transition\n      animation=\"fade right\"\n      duration={animationDuration}\n      visible={showContent}\n    >\n      <Container className=\"stats-page\">\n        <Divider section hidden />\n        <Header className=\"stats-title\" size=\"huge\">\n          {spm.stats}\n        </Header>\n        <Divider hidden />\n        <Divider />\n        <StatsSection />\n      </Container>\n    </Transition>\n  );\n};\n\nexport default StatsPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport HomePage from 'components/mainContent/homePage/HomePage';\nimport ResumePage from 'components/mainContent/resumePage/ResumePage';\nimport ProjectsPage from 'components/mainContent/projectsPage/ProjectsPage';\nimport StatsPage from 'components/mainContent/statsPage/StatsPage';\n\nimport 'components/mainContent/mainContent.css';\n\nexport interface IMainContentProps {\n  /**\n   *  This flag is used to tell if the side bar animation is finished already\n   * If so, the content in the MainContent component will show up right away.\n   * Otherwise, the content will wait for the side bar animation, then show itself afterwards.\n   */\n  sideBarReady?: boolean;\n}\n\nconst MainContent = (props: IMainContentProps) => {\n  return (\n    <div className=\"main-content\">\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage {...props} />\n        </Route>\n        <Route exact path=\"/resume\">\n          <ResumePage {...props} />\n        </Route>\n        <Route exact path=\"/projects\">\n          <ProjectsPage {...props} isOnHomePage={false} />\n        </Route>\n        <Route exact path=\"/stats\">\n          <StatsPage {...props} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default MainContent;\n","import React, { useState } from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Sidebar, Segment } from 'semantic-ui-react';\n\nimport { animationDuration } from 'utils/transitionUtil';\nimport SideNavigationBar from 'components/sideNavigationBar/SideNavigationBar';\nimport MainContent from 'components/mainContent/MainContent';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst App = () => {\n  const [sideBarReady, setSideBarReady] = useState(false);\n  setTimeout(() => {\n    !sideBarReady && setSideBarReady(true);\n  }, animationDuration);\n  return (\n    <Router>\n      <Sidebar.Pushable as={Segment}>\n        <SideNavigationBar />\n        <Sidebar.Pusher>\n          <MainContent sideBarReady={sideBarReady} />\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}